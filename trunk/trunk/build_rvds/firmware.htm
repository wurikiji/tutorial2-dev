<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Jeff\Desktop\skku_internship\OpenSSD-1.1.0\build_rvds\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Jeff\Desktop\skku_internship\OpenSSD-1.1.0\build_rvds\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 400]: Last Updated: Sat Jan 07 07:42:39 2012
<BR><P>
<H3>Maximum Stack Usage =         20 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ata_identify_device &rArr; set_string_data
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8a9694]">disable_interrupt</a>
 <LI><a href="#[8a9658]">enable_interrupt</a>
 <LI><a href="#[8a970c]">reset_handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8a8cbc]">is_bad_block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a8cbc]">is_bad_block</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8a6958]">ata_not_supported</a>
 <LI><a href="#[8a6a0c]">ata_nop</a>
 <LI><a href="#[8a6994]">ata_recalibrate</a>
 <LI><a href="#[8a6a48]">ata_read_native_max_address</a>
 <LI><a href="#[8a6cdc]">ata_read_verify_sectors</a>
 <LI><a href="#[8a6cdc]">ata_read_verify_sectors</a>
 <LI><a href="#[8a6c64]">ata_seek</a>
 <LI><a href="#[8a68e0]">ata_execute_drive_diagnostics</a>
 <LI><a href="#[8a69d0]">ata_initialize_device_parameters</a>
 <LI><a href="#[8a6b38]">ata_standby_immediate</a>
 <LI><a href="#[8a6ac0]">ata_idle_immediate</a>
 <LI><a href="#[8a6b74]">ata_standby</a>
 <LI><a href="#[8a6afc]">ata_idle</a>
 <LI><a href="#[8a6d90]">ata_check_power_mode</a>
 <LI><a href="#[8a6a84]">ata_sleep</a>
 <LI><a href="#[8a6c28]">ata_set_multiple_mode</a>
 <LI><a href="#[8a6b38]">ata_standby_immediate</a>
 <LI><a href="#[8a6ac0]">ata_idle_immediate</a>
 <LI><a href="#[8a6b74]">ata_standby</a>
 <LI><a href="#[8a6afc]">ata_idle</a>
 <LI><a href="#[8a6bec]">ata_read_buffer</a>
 <LI><a href="#[8a6d90]">ata_check_power_mode</a>
 <LI><a href="#[8a6a84]">ata_sleep</a>
 <LI><a href="#[8a6d18]">ata_flush_cache</a>
 <LI><a href="#[8a6bb0]">ata_write_buffer</a>
 <LI><a href="#[8a6d18]">ata_flush_cache</a>
 <LI><a href="#[8a7204]">ata_identify_device</a>
 <LI><a href="#[8a6ca0]">ata_set_features</a>
 <LI><a href="#[8a6a48]">ata_read_native_max_address</a>
 <LI><a href="#[8a691c]">ata_srst</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8a9694]"></a>disable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a5d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[8a9658]"></a>enable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a5d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[8a17c8]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A), UNUSED)

<P><STRONG><a name="[8a7aec]"></a>ftl_open</STRONG> (ARM, 508 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = ftl_open &rArr; format &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[8a781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[8a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[8a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8a8c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanity_check
<LI><a href="#[8a8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format_mark
<LI><a href="#[8a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>
<BR>[Called By]<UL><LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a7ab0]"></a>ftl_read</STRONG> (ARM, 332 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ftl_read
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8a8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_address
</UL>
<BR>[Called By]<UL><LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a7a74]"></a>ftl_write</STRONG> (ARM, 616 bytes, Stack size 48 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = ftl_write &rArr; get_free_page &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a8b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[8a8b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_physical_address
<LI><a href="#[8a8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_address
</UL>
<BR>[Called By]<UL><LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a7a38]"></a>ftl_flush</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a6ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[8a6afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[8a6b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[8a6b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[8a6d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
</UL>

<P><STRONG><a name="[8a79fc]"></a>ftl_isr</STRONG> (ARM, 200 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a91a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[8a7204]"></a>ata_identify_device</STRONG> (ARM, 216 bytes, Stack size 8 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ata_identify_device &rArr; set_string_data
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[8a736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string_data
<LI><a href="#[8a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrity_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6d90]"></a>ata_check_power_mode</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6d54]"></a>send_status_to_host</STRONG> (ARM, 128 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a6958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_not_supported
<LI><a href="#[8a6994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_recalibrate
<LI><a href="#[8a69d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[8a6a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_nop
<LI><a href="#[8a6a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_sleep
<LI><a href="#[8a6ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[8a6afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[8a6b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[8a6b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[8a6c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_multiple_mode
<LI><a href="#[8a6c64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_seek
<LI><a href="#[8a6ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_features
<LI><a href="#[8a6cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_verify_sectors
<LI><a href="#[8a6d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[8a7114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[8a9220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[8a6d18]"></a>ata_flush_cache</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ata_flush_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6cdc]"></a>ata_read_verify_sectors</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6ca0]"></a>ata_set_features</STRONG> (ARM, 196 bytes, Stack size 4 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ata_set_features
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6c64]"></a>ata_seek</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6c28]"></a>ata_set_multiple_mode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a7114]"></a>pio_sector_transfer</STRONG> (ARM, 220 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_write_buffer
<LI><a href="#[8a6bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_buffer
<LI><a href="#[8a7204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[8a6bec]"></a>ata_read_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a7114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6bb0]"></a>ata_write_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a7114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6b74]"></a>ata_standby</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ata_standby
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6b38]"></a>ata_standby_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ata_standby_immediate
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6afc]"></a>ata_idle</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ata_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6ac0]"></a>ata_idle_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ata_idle_immediate
</UL>
<BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6a84]"></a>ata_sleep</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6a48]"></a>ata_read_native_max_address</STRONG> (ARM, 172 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6a0c]"></a>ata_nop</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a69d0]"></a>ata_initialize_device_parameters</STRONG> (ARM, 104 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ata_initialize_device_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6994]"></a>ata_recalibrate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a6958]"></a>ata_not_supported</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_main.o(.text)
</UL>
<P><STRONG><a name="[8a691c]"></a>ata_srst</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[8a68a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8a68e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_execute_drive_diagnostics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a68e0]"></a>ata_execute_drive_diagnostics</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_execute_drive_diagnostics &rArr; ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[8a691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8a9220]"></a>fiq_handler</STRONG> (ARM, 1152 bytes, Stack size 56 bytes, sata_isr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a64a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8a6d54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>

<P><STRONG><a name="[8a925c]"></a>Main</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = Main &rArr; ftl_write &rArr; get_free_page &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a60ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get
<LI><a href="#[8a60e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get_count
<LI><a href="#[8a790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[8a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8a970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[8a68a4]"></a>delay</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sata_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a5d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[8a64a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8a691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
<LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a5d64]"></a>sata_reset</STRONG> (ARM, 272 bytes, Stack size 8 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = sata_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a5d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8a68a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8a9658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[8a9694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a71c8]"></a>_mem_copy</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a5224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[8a5260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[8a529c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[8a7204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
<LI><a href="#[8a77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[8a781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
</UL>

<P><STRONG><a name="[8a5350]"></a>_mem_bmp_find_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[8a5314]"></a>_mem_bmp_find_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[8a5d28]"></a>_mem_set_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[8a5d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a78d0]"></a>_mem_set_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[8a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a52d8]"></a>_mem_search_min_max</STRONG> (ARM, 80 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[8a790c]"></a>_mem_search_equ</STRONG> (ARM, 112 bytes, Stack size 4 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a77e0]"></a>_write_dram_32</STRONG> (ARM, 36 bytes, Stack size 12 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _write_dram_32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_physical_address
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a781c]"></a>_write_dram_16</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_dram_16
</UL>
<BR>[Calls]<UL><LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a529c]"></a>_write_dram_8</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[8a5260]"></a>_set_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[8a5224]"></a>_clr_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[8a51e8]"></a>_tst_bit_dram</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[8a51ac]"></a>_read_dram_8</STRONG> (ARM, 52 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a5134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
</UL>

<P><STRONG><a name="[8a7894]"></a>_read_dram_16</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a7858]"></a>_read_dram_32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_physical_address
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a5170]"></a>_mem_cmp_sram</STRONG> (ARM, 76 bytes, Stack size 4 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[8a5134]"></a>_mem_cmp_dram</STRONG> (ARM, 108 bytes, Stack size 20 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a51ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
</UL>

<P><STRONG><a name="[8a772c]"></a>flash_issue_cmd</STRONG> (ARM, 84 bytes, Stack size 0 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a49b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[8a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a4aa4]"></a>flash_copy</STRONG> (ARM, 100 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[8a4a68]"></a>flash_modify_copy</STRONG> (ARM, 124 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[8a4a2c]"></a>flash_erase</STRONG> (ARM, 88 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[8a49f0]"></a>flash_finish</STRONG> (ARM, 20 bytes, Stack size 0 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a49b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
</UL>

<P><STRONG><a name="[8a7768]"></a>flash_clear_irq</STRONG> (ARM, 44 bytes, Stack size 0 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[8a49b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8a8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format_mark
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a49b4]"></a>flash_reset</STRONG> (ARM, 260 bytes, Stack size 24 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a49f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8a91e4]"></a>init_jasmine</STRONG> (ARM, 420 bytes, Stack size 40 bytes, initialize.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = init_jasmine &rArr; ftl_open &rArr; format &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a49b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[8a5d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8a5d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[8a68a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[8a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>
<BR>[Called By]<UL><LI><a href="#[8a970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[8a76f0]"></a>led</STRONG> (ARM, 36 bytes, Stack size 0 bytes, misc.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a64a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8a8b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[8a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a64a8]"></a>led_blink</STRONG> (ARM, 44 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a68a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8a76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Called By]<UL><LI><a href="#[8a91a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[8a9220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[8a3988]"></a>swi_handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[8a91a8]"></a>irq_handler</STRONG> (ARM, 184 bytes, Stack size 24 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a64a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
</UL>

<P><STRONG><a name="[8a394c]"></a>test_nand_blocks</STRONG> (ARM, 744 bytes, Stack size 40 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a3064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[8a30dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[8a5d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[8a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>

<P><STRONG><a name="[8a3910]"></a>start_interval_measurement</STRONG> (ARM, 48 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[8a38d4]"></a>start_timer</STRONG> (ARM, 44 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[8a30dc]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a30a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[8a394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[8a30a0]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a30dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[8a3064]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a394c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[8a2e0c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8a2dd0]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8a2d94]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[8a2d58]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[8a2e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[8a2e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[8a2ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[8a69d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[8a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a970c]"></a>reset_handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = reset_handler &rArr; init_jasmine &rArr; ftl_open &rArr; format &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
<LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a8cbc]"></a>is_bad_block</STRONG> (ARM, 140 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8a76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[8a772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[8a77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[8a781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[8a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[8a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[8a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8a790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8a8b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[8a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>

<P><STRONG><a name="[8a8c80]"></a>format</STRONG> (ARM, 148 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = format &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[8a8c44]"></a>check_format_mark</STRONG> (ARM, 216 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_format_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[8a7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[8a8c08]"></a>sanity_check</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[8a8bcc]"></a>get_physical_address</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[8a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[8a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>

<P><STRONG><a name="[8a8b90]"></a>update_physical_address</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_physical_address &rArr; _write_dram_32
</UL>
<BR>[Calls]<UL><LI><a href="#[8a77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
</UL>

<P><STRONG><a name="[8a8b54]"></a>get_free_page</STRONG> (ARM, 120 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = get_free_page &rArr; is_bad_block &rArr;  is_bad_block (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8a76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[8a8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
</UL>

<P><STRONG><a name="[8a73a8]"></a>get_integrity_word</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sata_identify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a7204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[8a736c]"></a>set_string_data</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_string_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[8a60e8]"></a>eventq_get_count</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a60ac]"></a>eventq_get</STRONG> (ARM, 160 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8a2ec0]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[8a2e84]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[8a2e48]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
