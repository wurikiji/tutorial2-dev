<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Jeff\Desktop\skku_internship\tutorial2-dev\branches\redcarrot\build_rvds\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Jeff\Desktop\skku_internship\tutorial2-dev\branches\redcarrot\build_rvds\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 591]: Last Updated: Tue Jan 24 08:19:53 2012
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ata_flush_cache &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[859694]">disable_interrupt</a>
 <LI><a href="#[859658]">enable_interrupt</a>
 <LI><a href="#[85970c]">reset_handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[858cbc]">update_bundle_lives</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[858cbc]">update_bundle_lives</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85646c]">ata_not_supported</a>
 <LI><a href="#[84e654]">_snputc</a>
 <LI><a href="#[84e744]">_sputc</a>
 <LI><a href="#[84e8ac]">_printf_input_char</a>
 <LI><a href="#[38270c0]">_get_lc_ctype</a>
 <LI><a href="#[382a090]">__I$use$semihosting</a>
 <LI><a href="#[856520]">ata_nop</a>
 <LI><a href="#[8564a8]">ata_recalibrate</a>
 <LI><a href="#[85655c]">ata_read_native_max_address</a>
 <LI><a href="#[8567f0]">ata_read_verify_sectors</a>
 <LI><a href="#[8567f0]">ata_read_verify_sectors</a>
 <LI><a href="#[856778]">ata_seek</a>
 <LI><a href="#[8563f4]">ata_execute_drive_diagnostics</a>
 <LI><a href="#[8564e4]">ata_initialize_device_parameters</a>
 <LI><a href="#[85664c]">ata_standby_immediate</a>
 <LI><a href="#[8565d4]">ata_idle_immediate</a>
 <LI><a href="#[856688]">ata_standby</a>
 <LI><a href="#[856610]">ata_idle</a>
 <LI><a href="#[8568a4]">ata_check_power_mode</a>
 <LI><a href="#[856598]">ata_sleep</a>
 <LI><a href="#[85673c]">ata_set_multiple_mode</a>
 <LI><a href="#[85664c]">ata_standby_immediate</a>
 <LI><a href="#[8565d4]">ata_idle_immediate</a>
 <LI><a href="#[856688]">ata_standby</a>
 <LI><a href="#[856610]">ata_idle</a>
 <LI><a href="#[856700]">ata_read_buffer</a>
 <LI><a href="#[8568a4]">ata_check_power_mode</a>
 <LI><a href="#[856598]">ata_sleep</a>
 <LI><a href="#[85682c]">ata_flush_cache</a>
 <LI><a href="#[8566c4]">ata_write_buffer</a>
 <LI><a href="#[85682c]">ata_flush_cache</a>
 <LI><a href="#[856cdc]">ata_identify_device</a>
 <LI><a href="#[8567b4]">ata_set_features</a>
 <LI><a href="#[85655c]">ata_read_native_max_address</a>
 <LI><a href="#[856430]">ata_srst</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[859694]"></a>disable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8558b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[859658]"></a>enable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8558b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[84cc50]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[84e99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[850814]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85097c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[84caac]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[84c764]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[382e104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[84c6b0]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[382e104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[84c5fc]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Calls]<UL><LI><a href="#[382e104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[84c548]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[382e014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[84c1c4]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[84c8cc]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[84c818]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[8508c8]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[84c9bc]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[84cb9c]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[84c3e0]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[84c32c]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[84c278]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[84be7c]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84de5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[84bd8c]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[84c110]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[84ce30]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[382bc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[84cd40]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[382bc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[84c05c]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[382bad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[84bf6c]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[382ba94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[84c494]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[382f0b8]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[382ee9c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[382efc8]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[382ea64]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[382a57c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[3827840]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[85781c]"></a>flush_merge_buffer</STRONG> (ARM, 192 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[858aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[8577e0]"></a>ftl_flush</STRONG> (ARM, 20 bytes, Stack size 8 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[8565d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[856610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[85664c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[856688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[85682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[8577a4]"></a>ftl_open</STRONG> (ARM, 548 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = ftl_open &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8573a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[85745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[8574d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
<LI><a href="#[858974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanity_check
<LI><a href="#[8589b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_metadata
<LI><a href="#[8589ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[857768]"></a>ftl_read_sector</STRONG> (ARM, 236 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = ftl_read_sector &rArr; get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[85772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>

<P><STRONG><a name="[85772c]"></a>ftl_read</STRONG> (ARM, 192 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ftl_read &rArr; ftl_read_sector &rArr; get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[857768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[8576f0]"></a>ftl_write_sector</STRONG> (ARM, 368 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[8576b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
</UL>

<P><STRONG><a name="[8576b4]"></a>ftl_write</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[857678]"></a>ftl_isr</STRONG> (ARM, 232 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[8591a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[856cdc]"></a>ata_identify_device</STRONG> (ARM, 216 bytes, Stack size 8 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = ata_identify_device &rArr; _mem_copy &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[856c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[856e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string_data
<LI><a href="#[856e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrity_word
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8568a4]"></a>ata_check_power_mode</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856868]"></a>send_status_to_host</STRONG> (ARM, 128 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85646c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_not_supported
<LI><a href="#[8564a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_recalibrate
<LI><a href="#[8564e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[856520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_nop
<LI><a href="#[856598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_sleep
<LI><a href="#[8565d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[856610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[85664c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[856688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[85673c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_multiple_mode
<LI><a href="#[856778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_seek
<LI><a href="#[8567b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_features
<LI><a href="#[8567f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_verify_sectors
<LI><a href="#[85682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[856c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[859220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[85682c]"></a>ata_flush_cache</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ata_flush_cache &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8567f0]"></a>ata_read_verify_sectors</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8567b4]"></a>ata_set_features</STRONG> (ARM, 196 bytes, Stack size 4 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ata_set_features
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856778]"></a>ata_seek</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[85673c]"></a>ata_set_multiple_mode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856c28]"></a>pio_sector_transfer</STRONG> (ARM, 220 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[8566c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_write_buffer
<LI><a href="#[856700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_buffer
<LI><a href="#[856cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[856700]"></a>ata_read_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8566c4]"></a>ata_write_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856688]"></a>ata_standby</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ata_standby &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[85664c]"></a>ata_standby_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ata_standby_immediate &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856610]"></a>ata_idle</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ata_idle &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8565d4]"></a>ata_idle_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = ata_idle_immediate &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856598]"></a>ata_sleep</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[85655c]"></a>ata_read_native_max_address</STRONG> (ARM, 164 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[856520]"></a>ata_nop</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8564e4]"></a>ata_initialize_device_parameters</STRONG> (ARM, 104 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ata_initialize_device_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8564a8]"></a>ata_recalibrate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[85646c]"></a>ata_not_supported</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_main.o(.text)
</UL>
<P><STRONG><a name="[856430]"></a>ata_srst</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[8563b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8563f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_execute_drive_diagnostics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[8563f4]"></a>ata_execute_drive_diagnostics</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_execute_drive_diagnostics &rArr; ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[856430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[859220]"></a>fiq_handler</STRONG> (ARM, 1152 bytes, Stack size 56 bytes, sata_isr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[856868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[85925c]"></a>Main</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Main &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[855bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get
<LI><a href="#[855c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get_count
<LI><a href="#[85754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[8576b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[85772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[85970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[8563b8]"></a>delay</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sata_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8532f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_handler
<LI><a href="#[8558b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[856430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8558b4]"></a>sata_reset</STRONG> (ARM, 272 bytes, Stack size 8 bytes, sata_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[855878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8563b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[859658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[859694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[857588]"></a>_mem_copy</STRONG> (ARM, 260 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _mem_copy &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[854d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[854db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[854dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[856cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
<LI><a href="#[857420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[85745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[857768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[854ea0]"></a>_mem_bmp_find_sram</STRONG> (ARM, 288 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[854e64]"></a>_mem_bmp_find_dram</STRONG> (ARM, 228 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[855878]"></a>_mem_set_sram</STRONG> (ARM, 184 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _mem_set_sram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[8532bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[8558b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[857510]"></a>_mem_set_dram</STRONG> (ARM, 180 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _mem_set_dram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[8532bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[857768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8589b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_metadata
<LI><a href="#[858a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_format_mark
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[854e28]"></a>_mem_search_min_max</STRONG> (ARM, 164 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[85754c]"></a>_mem_search_equ</STRONG> (ARM, 180 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _mem_search_equ &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[858adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[857420]"></a>_write_dram_32</STRONG> (ARM, 76 bytes, Stack size 16 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _write_dram_32 &rArr; _mem_copy &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[85745c]"></a>_write_dram_16</STRONG> (ARM, 120 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = _write_dram_16 &rArr; _mem_copy &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[854dec]"></a>_write_dram_8</STRONG> (ARM, 120 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[854db0]"></a>_set_bit_dram</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[854d74]"></a>_clr_bit_dram</STRONG> (ARM, 124 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[854d38]"></a>_tst_bit_dram</STRONG> (ARM, 104 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[854cfc]"></a>_read_dram_8</STRONG> (ARM, 100 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[854c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
</UL>

<P><STRONG><a name="[8574d4]"></a>_read_dram_16</STRONG> (ARM, 104 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _read_dram_16 &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[857498]"></a>_read_dram_32</STRONG> (ARM, 108 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _read_dram_32 &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[854cc0]"></a>_mem_cmp_sram</STRONG> (ARM, 172 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[854c84]"></a>_mem_cmp_dram</STRONG> (ARM, 224 bytes, Stack size 24 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[854cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[857330]"></a>flash_issue_cmd</STRONG> (ARM, 84 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[853fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase_sync
<LI><a href="#[853fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_modified_copyback
<LI><a href="#[854018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_copyback
<LI><a href="#[854054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[854090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[8540cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program
<LI><a href="#[854108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[854144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[854180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read
<LI><a href="#[854540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[857204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[857768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[85781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8545f4]"></a>flash_copy</STRONG> (ARM, 100 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[8545b8]"></a>flash_modify_copy</STRONG> (ARM, 124 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[85457c]"></a>flash_erase</STRONG> (ARM, 128 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[85736c]"></a>flash_finish</STRONG> (ARM, 20 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[854540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[8573a8]"></a>flash_clear_irq</STRONG> (ARM, 44 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8532bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[854540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[854540]"></a>flash_reset</STRONG> (ARM, 260 bytes, Stack size 24 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[8573a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[854180]"></a>nand_page_read</STRONG> (ARM, 184 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[857204]"></a>nand_page_ptread</STRONG> (ARM, 192 bytes, Stack size 16 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = nand_page_ptread &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[854144]"></a>nand_page_read_to_host</STRONG> (ARM, 300 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[854108]"></a>nand_page_ptread_to_host</STRONG> (ARM, 228 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[8540cc]"></a>nand_page_program</STRONG> (ARM, 184 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[857240]"></a>nand_page_ptprogram</STRONG> (ARM, 188 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = nand_page_ptprogram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[854090]"></a>nand_page_program_from_host</STRONG> (ARM, 224 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[854054]"></a>nand_page_ptprogram_from_host</STRONG> (ARM, 224 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[854018]"></a>nand_page_copyback</STRONG> (ARM, 256 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[853fdc]"></a>nand_page_modified_copyback</STRONG> (ARM, 440 bytes, Stack size 40 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[85727c]"></a>nand_block_erase</STRONG> (ARM, 136 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = nand_block_erase &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[853fa0]"></a>nand_block_erase_sync</STRONG> (ARM, 136 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[8591e4]"></a>init_jasmine</STRONG> (ARM, 432 bytes, Stack size 40 bytes, initialize.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = init_jasmine &rArr; ftl_test &rArr; tc_write_rand &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[853ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[853be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
<LI><a href="#[854540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[855878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8563b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[8573a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>
<BR>[Called By]<UL><LI><a href="#[85970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[8572f4]"></a>led</STRONG> (ARM, 36 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[8532f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_handler
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[858aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8572b8]"></a>led_blink</STRONG> (ARM, 44 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[8563b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[853244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[853280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_interval_measurement
<LI><a href="#[853ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[853fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase_sync
<LI><a href="#[853fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_modified_copyback
<LI><a href="#[854018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_copyback
<LI><a href="#[854054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[854090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[8540cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program
<LI><a href="#[854108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[854144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[854180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read
<LI><a href="#[85457c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[854c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
<LI><a href="#[854cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_sram
<LI><a href="#[854cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
<LI><a href="#[854d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tst_bit_dram
<LI><a href="#[854d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[854db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[854dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[854e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_min_max
<LI><a href="#[854e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_bmp_find_dram
<LI><a href="#[854ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_bmp_find_sram
<LI><a href="#[855878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[857204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[857420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[85745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[857498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[8574d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[85754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[857678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
<LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[859220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[8532f8]"></a>swi_handler</STRONG> (ARM, 84 bytes, Stack size 32 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8563b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[8591a8]"></a>irq_handler</STRONG> (ARM, 192 bytes, Stack size 24 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
</UL>

<P><STRONG><a name="[8532bc]"></a>test_nand_blocks</STRONG> (ARM, 740 bytes, Stack size 40 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[84fe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[855878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[8573a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>

<P><STRONG><a name="[853280]"></a>start_interval_measurement</STRONG> (ARM, 152 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[853208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_start
</UL>

<P><STRONG><a name="[853244]"></a>start_timer</STRONG> (ARM, 148 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[853208]"></a>ptimer_start</STRONG> (ARM, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[853280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_interval_measurement
</UL>

<P><STRONG><a name="[8531cc]"></a>ptimer_stop_and_uart_print</STRONG> (ARM, 120 bytes, Stack size 72 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85169c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[852290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[853190]"></a>_sbrk</STRONG> (ARM, 156 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[853b68]"></a>uart_print</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_print
</UL>
<BR>[Calls]<UL><LI><a href="#[852d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_txbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[852a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_32
<LI><a href="#[8531cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print
<LI><a href="#[853be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[8571c8]"></a>uart_printf</STRONG> (ARM, 72 bytes, Stack size 280 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8506ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush (via Veneer)
<LI><a href="#[8520ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf (via Veneer)
<LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[853244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[853280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_interval_measurement
<LI><a href="#[853ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[853fa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase_sync
<LI><a href="#[853fdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_modified_copyback
<LI><a href="#[854018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_copyback
<LI><a href="#[854054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[854090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[8540cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program
<LI><a href="#[854108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[854144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[854180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read
<LI><a href="#[85457c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[854c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
<LI><a href="#[854cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_sram
<LI><a href="#[854cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
<LI><a href="#[854d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tst_bit_dram
<LI><a href="#[854d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[854db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[854dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[854e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_min_max
<LI><a href="#[854e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_bmp_find_dram
<LI><a href="#[854ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_bmp_find_sram
<LI><a href="#[855878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[857204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[857420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[85745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[857498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[8574d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[85754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[857678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
<LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[8591a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[853ba4]"></a>uart_init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = uart_init &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[852a10]"></a>uart_print_32</STRONG> (ARM, 44 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85169c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[8529d4]"></a>uart_print_hex</STRONG> (ARM, 144 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_txbyte
</UL>

<P><STRONG><a name="[853be0]"></a>ftl_test</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = ftl_test &rArr; tc_write_rand &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>
<BR>[Called By]<UL><LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[852290]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8531cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print
</UL>

<P><STRONG><a name="[852254]"></a>_ll_udiv</STRONG> (ARM, 720 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[852218]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[8520ec]"></a>vsnprintf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84e744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[84e870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf (via Veneer)
</UL>

<P><STRONG><a name="[85169c]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84e744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[84e870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[852a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_32 (via Veneer)
<LI><a href="#[8531cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print (via Veneer)
</UL>

<P><STRONG><a name="[851264]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84b120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84eca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[84ece4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[84c818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[84c8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
<LI><a href="#[8508c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
</UL>

<P><STRONG><a name="[85097c]"></a>__printf</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[850814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[851390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[84e870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[8506e8]"></a>_do_fflush</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[8506ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[8506ac]"></a>fflush</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8506e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf (via Veneer)
</UL>

<P><STRONG><a name="[84fe3c]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[84fe00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[8532bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[84fe00]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84fe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[84fdc4]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[8532bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[84fb6c]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[84fb30]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[85268c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
</UL>

<P><STRONG><a name="[84ee10]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[84e474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84ebb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[84edd4]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[84e474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84ebb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[84ece4]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84eca8]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84cf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[84de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84ebb8]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[84edd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[84ee10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[382bcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[84ea8c]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[84edd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[84ee10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[84cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[84ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[84e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84e99c]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84cc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[84e870]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85097c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85169c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8520ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[84e744]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85169c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8520ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[84e654]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[84e474]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[84e438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[84edd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[84ee10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[382b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[382bb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[84e2d0]"></a>_printf_longlong_dec</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[382be90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[84c278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[84c32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[84c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[84ded4]"></a>_printf_longlong_oct</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84de5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[84de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[84de98]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[84eca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[84c9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[84de5c]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[84be7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[84cf98]"></a>_printf_longlong_hex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84cee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[84cf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[84cf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[84cf5c]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[84eca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[84cb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[84cf20]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[84bd8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[84cee4]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[84caac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[84bc60]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[84ba44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[382b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[382da38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[382daec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[8506e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[382b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[84bc24]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[84ba44]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84ba08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[84ba08]"></a>_writebuf</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84ba44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[382dab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[382db64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[84b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[84b9cc]"></a>_fflush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84ba08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[84b990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[8506e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[382b530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[84b990]"></a>_deferredlazyseek</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[84b774]"></a>_initio</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382ac0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[382aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[382b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[382b800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[84b738]"></a>_terminateio</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382b4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[382d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[84b120]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[851264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[382dbdc]"></a>_sys_open</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3828560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[382b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[382dba0]"></a>_sys_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[382b530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[382db64]"></a>_sys_write</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[84ba08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[382db28]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[382daec]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[382dab0]"></a>_sys_seek</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[84ba08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[382da74]"></a>_sys_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[382da38]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[382d510]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3829c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[84b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[38274f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[382b530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[382be90]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[84e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[382bcb0]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[84ebb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[382bbfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[382bc38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[382bc74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[382bc74]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[382bcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84ce30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[382bc38]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[382bcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84cd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[382bb0c]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[84e474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[382ba58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[382ba94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[382bad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[382bad0]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[382bb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84c05c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[382ba94]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[382bb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84bf6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[382b968]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3829a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[382b92c]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[382b800]"></a>setvbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, setvbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84b774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[382b6d4]"></a>freopen</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84bc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[382b530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[382dbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[84b774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[382b698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[382b698]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3828fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[382ac0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[382b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[382b530]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[382ac0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[382d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[382dba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[382b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[382b4f4]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84b738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[382b008]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3829f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[382afcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[84e474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[382aea0]"></a>__rt_SIGRTRED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382868c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3828998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84b774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[382ac0c]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84b774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via Veneer)
<LI><a href="#[382b530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal (via Veneer)
<LI><a href="#[382b698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen (via Veneer)
</UL>

<P><STRONG><a name="[382abd0]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[382ab94]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[382ab58]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[382a090]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[382a054]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3829f64]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3827b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[382b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[3829c94]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3828fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[382d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>

<P><STRONG><a name="[3829a00]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[382b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal (via Veneer)
</UL>

<P><STRONG><a name="[38299c4]"></a>__errno</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[3829988]"></a>__rt_errno_addr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[3829730]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[38296f4]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3829604]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[38295c8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[382958c]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38268c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[38274f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3828fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[3829550]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3826b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3829514]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38268c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3826904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[3826b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[38274f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[3827624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[3829c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>

<P><STRONG><a name="[3828fb0]"></a>malloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382958c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[3829c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[382b698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[3828998]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3827f0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3826b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[382aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[382868c]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3826db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[382aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3828560]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[382dbdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[3827f0c]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3828998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
</UL>

<P><STRONG><a name="[3827b88]"></a>__rt_locale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3829f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[3827624]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[38275e8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[38274f8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, h1_extend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382d510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[382958c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3826db4]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3826580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[3826328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[382868c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[3826b98]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3826328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3828998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3829550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3826904]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[38268c8]"></a>__rt_heap_expand</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, heapauxa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3829514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[382958c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3826580]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_wrch.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3826db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3826328]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3826db4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3826b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3825b6c]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38270c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[84faf4]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[84fab8]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[84fba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[84fbe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[84fc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[854054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[854090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[854108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[854144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[8564e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[8576b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[85772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[851390]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[85097c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[84e438]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[84e474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[84ea8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[84ebb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[84edd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[84ee10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[85097c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[382afcc]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[382b008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[38270c0]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3825b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[382e104]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Called By]<UL><LI><a href="#[84c5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[84c6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[84c764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[382e014]"></a>_printf_fp_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Called By]<UL><LI><a href="#[84c548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[85970c]"></a>reset_handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = reset_handler &rArr; init_jasmine &rArr; ftl_test &rArr; tc_write_rand &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8591e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
<LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[858cbc]"></a>update_bundle_lives</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[857204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[857330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[8573a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[857420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[85745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[857498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[8574d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[85754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[858c80]"></a>logging_smt_cache</STRONG> (ARM, 284 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = logging_smt_cache &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[858c44]"></a>logging_misc_metadata</STRONG> (ARM, 152 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = logging_misc_metadata &rArr; nand_page_ptprogram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[858c08]"></a>fetch_smt_bundle</STRONG> (ARM, 232 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = fetch_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[857204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[858bcc]"></a>evict_smt_bundle</STRONG> (ARM, 396 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[858b90]"></a>select_victim_bundle</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[858b54]"></a>where_bundle_cached</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[858938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[858b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[858b18]"></a>set_psn</STRONG> (ARM, 192 bytes, Stack size 32 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[858b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;where_bundle_cached
<LI><a href="#[858b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_victim_bundle
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[85781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
</UL>

<P><STRONG><a name="[858adc]"></a>is_bad_block</STRONG> (ARM, 140 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = is_bad_block &rArr; _mem_search_equ &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[8589ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[858a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_smt_metadata
<LI><a href="#[858aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
</UL>

<P><STRONG><a name="[858aa0]"></a>get_free_page</STRONG> (ARM, 120 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = get_free_page &rArr; is_bad_block &rArr; _mem_search_equ &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[858adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[85781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
</UL>

<P><STRONG><a name="[858a64]"></a>init_smt_metadata</STRONG> (ARM, 340 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = init_smt_metadata &rArr; is_bad_block &rArr; _mem_search_equ &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[857240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[85727c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[858adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[858a28]"></a>write_format_mark</STRONG> (ARM, 164 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = write_format_mark &rArr; _mem_set_dram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>
<BR>[Called By]<UL><LI><a href="#[8589ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[8589ec]"></a>format</STRONG> (ARM, 140 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = format &rArr; is_bad_block &rArr; _mem_search_equ &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[858a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_format_mark
<LI><a href="#[858adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[8589b0]"></a>init_metadata</STRONG> (ARM, 72 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = init_metadata &rArr; _mem_set_dram &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>
<BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[858974]"></a>sanity_check</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8577a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[858938]"></a>get_psn</STRONG> (ARM, 184 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[857498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[858b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;where_bundle_cached
<LI><a href="#[858b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_victim_bundle
<LI><a href="#[858bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[858c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[858cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[8576f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[857768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
</UL>

<P><STRONG><a name="[856e80]"></a>get_integrity_word</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sata_identify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[856cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[856e44]"></a>set_string_data</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_string_data
</UL>
<BR>[Called By]<UL><LI><a href="#[856cdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[855c38]"></a>eventq_get_count</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[855bfc]"></a>eventq_get</STRONG> (ARM, 160 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[85925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[852d58]"></a>uart_txbyte</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8529d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_hex
<LI><a href="#[853b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[85268c]"></a>tc_write_rand</STRONG> (ARM, 408 bytes, Stack size 48 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tc_write_rand &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84fb30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84fdc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[84fe3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[8571c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[8572b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[8572f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[85736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[857498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[857510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[8576b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[85772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[8577e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[853be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
</UL>

<P><STRONG><a name="[84fc20]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[84fbe4]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[84fba8]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84fab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[84e8ac]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[382bbfc]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[382bcb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[382ba58]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[382bb0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
