<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Jeff\Desktop\skku_internship\tutorial2-dev\branches\redcarrot\build_rvds\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Jeff\Desktop\skku_internship\tutorial2-dev\branches\redcarrot\build_rvds\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 400]: Last Updated: Tue Jan 24 02:51:13 2012
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ata_flush_cache &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2039694]">disable_interrupt</a>
 <LI><a href="#[2039658]">enable_interrupt</a>
 <LI><a href="#[203970c]">reset_handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2038cbc]">update_bundle_lives</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2038cbc]">update_bundle_lives</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[203655c]">ata_not_supported</a>
 <LI><a href="#[202e708]">_snputc</a>
 <LI><a href="#[202e7f8]">_sputc</a>
 <LI><a href="#[202e960]">_printf_input_char</a>
 <LI><a href="#[3872264]">_get_lc_ctype</a>
 <LI><a href="#[38751bc]">__I$use$semihosting</a>
 <LI><a href="#[2036610]">ata_nop</a>
 <LI><a href="#[2036598]">ata_recalibrate</a>
 <LI><a href="#[203664c]">ata_read_native_max_address</a>
 <LI><a href="#[20368e0]">ata_read_verify_sectors</a>
 <LI><a href="#[20368e0]">ata_read_verify_sectors</a>
 <LI><a href="#[2036868]">ata_seek</a>
 <LI><a href="#[20364e4]">ata_execute_drive_diagnostics</a>
 <LI><a href="#[20365d4]">ata_initialize_device_parameters</a>
 <LI><a href="#[203673c]">ata_standby_immediate</a>
 <LI><a href="#[20366c4]">ata_idle_immediate</a>
 <LI><a href="#[2036778]">ata_standby</a>
 <LI><a href="#[2036700]">ata_idle</a>
 <LI><a href="#[2036994]">ata_check_power_mode</a>
 <LI><a href="#[2036688]">ata_sleep</a>
 <LI><a href="#[203682c]">ata_set_multiple_mode</a>
 <LI><a href="#[203673c]">ata_standby_immediate</a>
 <LI><a href="#[20366c4]">ata_idle_immediate</a>
 <LI><a href="#[2036778]">ata_standby</a>
 <LI><a href="#[2036700]">ata_idle</a>
 <LI><a href="#[20367f0]">ata_read_buffer</a>
 <LI><a href="#[2036994]">ata_check_power_mode</a>
 <LI><a href="#[2036688]">ata_sleep</a>
 <LI><a href="#[203691c]">ata_flush_cache</a>
 <LI><a href="#[20367b4]">ata_write_buffer</a>
 <LI><a href="#[203691c]">ata_flush_cache</a>
 <LI><a href="#[2036dcc]">ata_identify_device</a>
 <LI><a href="#[20368a4]">ata_set_features</a>
 <LI><a href="#[203664c]">ata_read_native_max_address</a>
 <LI><a href="#[2036520]">ata_srst</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2039694]"></a>disable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2035968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[2039658]"></a>enable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2035968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[202cd04]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202ea50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[20308c8]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2030a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[202cb60]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[202c818]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38791b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[202c764]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38791b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[202c6b0]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38791b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[202c5fc]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38790c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[202c278]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007), UNUSED)

<P><STRONG><a name="[202c980]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[202c8cc]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[203097c]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[202ca70]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[202cc50]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202d010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[202c494]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[202c3e0]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[202c32c]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[202bf30]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202df10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[202be40]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202cfd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[202c1c4]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012), UNUSED)

<P><STRONG><a name="[202cee4]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[202cdf4]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[202c110]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[202c020]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[202c548]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017), UNUSED)

<P><STRONG><a name="[387a16c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000006), UNUSED)

<P><STRONG><a name="[3879f50]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F), UNUSED)

<P><STRONG><a name="[387a07c]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A), UNUSED)

<P><STRONG><a name="[3879b18]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$00000021), UNUSED)

<P><STRONG><a name="[38756a8]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003), UNUSED)

<P><STRONG><a name="[38729e4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[2037894]"></a>flush_merge_buffer</STRONG> (ARM, 192 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[2038aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[2037858]"></a>ftl_flush</STRONG> (ARM, 20 bytes, Stack size 8 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2037894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
<LI><a href="#[2038c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20366c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[2036700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[203673c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[2036778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[203691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[203781c]"></a>ftl_open</STRONG> (ARM, 532 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = ftl_open &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[2037420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[20374d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[203754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
<LI><a href="#[20389ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanity_check
<LI><a href="#[2038a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>
<BR>[Called By]<UL><LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[20377e0]"></a>ftl_read_sector</STRONG> (ARM, 236 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ftl_read_sector &rArr; get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[20377a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>

<P><STRONG><a name="[20377a4]"></a>ftl_read</STRONG> (ARM, 192 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ftl_read &rArr; ftl_read_sector &rArr; get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20377e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[2037768]"></a>ftl_write_sector</STRONG> (ARM, 368 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[203772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
</UL>

<P><STRONG><a name="[203772c]"></a>ftl_write</STRONG> (ARM, 200 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[20376f0]"></a>ftl_isr</STRONG> (ARM, 200 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[2036dcc]"></a>ata_identify_device</STRONG> (ARM, 216 bytes, Stack size 8 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ata_identify_device &rArr; set_string_data
</UL>
<BR>[Calls]<UL><LI><a href="#[2036d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[2036f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string_data
<LI><a href="#[2036f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrity_word
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036994]"></a>ata_check_power_mode</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036958]"></a>send_status_to_host</STRONG> (ARM, 128 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203655c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_not_supported
<LI><a href="#[2036598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_recalibrate
<LI><a href="#[20365d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[2036610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_nop
<LI><a href="#[2036688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_sleep
<LI><a href="#[20366c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[2036700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[203673c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[2036778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[203682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_multiple_mode
<LI><a href="#[2036868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_seek
<LI><a href="#[20368a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_features
<LI><a href="#[20368e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_verify_sectors
<LI><a href="#[203691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[2036d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[2039220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[203691c]"></a>ata_flush_cache</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ata_flush_cache &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20368e0]"></a>ata_read_verify_sectors</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20368a4]"></a>ata_set_features</STRONG> (ARM, 196 bytes, Stack size 4 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ata_set_features
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036868]"></a>ata_seek</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[203682c]"></a>ata_set_multiple_mode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036d18]"></a>pio_sector_transfer</STRONG> (ARM, 220 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[20367b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_write_buffer
<LI><a href="#[20367f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_buffer
<LI><a href="#[2036dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[20367f0]"></a>ata_read_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20367b4]"></a>ata_write_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036778]"></a>ata_standby</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ata_standby &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[203673c]"></a>ata_standby_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ata_standby_immediate &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036700]"></a>ata_idle</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ata_idle &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20366c4]"></a>ata_idle_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ata_idle_immediate &rArr; ftl_flush &rArr; flush_merge_buffer &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036688]"></a>ata_sleep</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[203664c]"></a>ata_read_native_max_address</STRONG> (ARM, 164 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036610]"></a>ata_nop</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20365d4]"></a>ata_initialize_device_parameters</STRONG> (ARM, 104 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ata_initialize_device_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2036598]"></a>ata_recalibrate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[203655c]"></a>ata_not_supported</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_main.o(.text)
</UL>
<P><STRONG><a name="[2036520]"></a>ata_srst</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[20364a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[20364e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_execute_drive_diagnostics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[20364e4]"></a>ata_execute_drive_diagnostics</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_execute_drive_diagnostics &rArr; ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[2036520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[2039220]"></a>fiq_handler</STRONG> (ARM, 1152 bytes, Stack size 56 bytes, sata_isr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20360ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[2036958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>

<P><STRONG><a name="[203925c]"></a>Main</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Main &rArr; ftl_write &rArr; ftl_write_sector &rArr; set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2035cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get
<LI><a href="#[2035cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get_count
<LI><a href="#[20375c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[203772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[20377a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[203970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[20364a8]"></a>delay</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sata_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2035968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[20360ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[2036520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2035968]"></a>sata_reset</STRONG> (ARM, 272 bytes, Stack size 8 bytes, sata_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203592c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[20364a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2039658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[2039694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[2037600]"></a>_mem_copy</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2034e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[2034e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[2034ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[2036dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
<LI><a href="#[2037498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[20374d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[20377e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2034f54]"></a>_mem_bmp_find_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[2034f18]"></a>_mem_bmp_find_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[203592c]"></a>_mem_set_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[20333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[2035968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2037588]"></a>_mem_set_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[20377e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[2038a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_format_mark
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2034edc]"></a>_mem_search_min_max</STRONG> (ARM, 80 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[20375c4]"></a>_mem_search_equ</STRONG> (ARM, 112 bytes, Stack size 4 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[2038adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[2037498]"></a>_write_dram_32</STRONG> (ARM, 36 bytes, Stack size 12 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _write_dram_32
</UL>
<BR>[Calls]<UL><LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[20374d4]"></a>_write_dram_16</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_dram_16
</UL>
<BR>[Calls]<UL><LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2034ea0]"></a>_write_dram_8</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[2034e64]"></a>_set_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[2034e28]"></a>_clr_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[2034dec]"></a>_tst_bit_dram</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[2034db0]"></a>_read_dram_8</STRONG> (ARM, 52 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2034d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
</UL>

<P><STRONG><a name="[203754c]"></a>_read_dram_16</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2037510]"></a>_read_dram_32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2034d74]"></a>_mem_cmp_sram</STRONG> (ARM, 76 bytes, Stack size 4 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[2034d38]"></a>_mem_cmp_dram</STRONG> (ARM, 108 bytes, Stack size 20 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2034db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
</UL>

<P><STRONG><a name="[20373a8]"></a>flash_issue_cmd</STRONG> (ARM, 84 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2034054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase_sync
<LI><a href="#[2034090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_modified_copyback
<LI><a href="#[20340cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_copyback
<LI><a href="#[2034108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[2034144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[2034180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program
<LI><a href="#[20341bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[20341f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[2034234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read
<LI><a href="#[20345f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[20372b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[20372f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[2037330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[20377e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[2037894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[20346a8]"></a>flash_copy</STRONG> (ARM, 100 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[203466c]"></a>flash_modify_copy</STRONG> (ARM, 124 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[2034630]"></a>flash_erase</STRONG> (ARM, 88 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[20373e4]"></a>flash_finish</STRONG> (ARM, 20 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20345f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2037420]"></a>flash_clear_irq</STRONG> (ARM, 44 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[20345f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[20345f4]"></a>flash_reset</STRONG> (ARM, 260 bytes, Stack size 24 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2034234]"></a>nand_page_read</STRONG> (ARM, 80 bytes, Stack size 0 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[20372b8]"></a>nand_page_ptread</STRONG> (ARM, 96 bytes, Stack size 16 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[20341f8]"></a>nand_page_read_to_host</STRONG> (ARM, 132 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[20341bc]"></a>nand_page_ptread_to_host</STRONG> (ARM, 132 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[2034180]"></a>nand_page_program</STRONG> (ARM, 80 bytes, Stack size 0 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[20372f4]"></a>nand_page_ptprogram</STRONG> (ARM, 92 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand_page_ptprogram
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2034144]"></a>nand_page_program_from_host</STRONG> (ARM, 128 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[2034108]"></a>nand_page_ptprogram_from_host</STRONG> (ARM, 128 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[20340cc]"></a>nand_page_copyback</STRONG> (ARM, 96 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[2034090]"></a>nand_page_modified_copyback</STRONG> (ARM, 280 bytes, Stack size 40 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[2037330]"></a>nand_block_erase</STRONG> (ARM, 72 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand_block_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2034054]"></a>nand_block_erase_sync</STRONG> (ARM, 72 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[20391e4]"></a>init_jasmine</STRONG> (ARM, 432 bytes, Stack size 40 bytes, initialize.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = init_jasmine &rArr; ftl_test &rArr; tc_write_rand &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[2033c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2033c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
<LI><a href="#[20345f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[203592c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[20364a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[203736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[2037420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>
<BR>[Called By]<UL><LI><a href="#[203970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[203736c]"></a>led</STRONG> (ARM, 36 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20360ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[2038aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[20360ac]"></a>led_blink</STRONG> (ARM, 44 bytes, Stack size 8 bytes, misc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[20364a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[203736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[2039220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[20333e8]"></a>swi_handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[20391a8]"></a>irq_handler</STRONG> (ARM, 192 bytes, Stack size 24 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20330a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[20360ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[20376f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
</UL>

<P><STRONG><a name="[20333ac]"></a>test_nand_blocks</STRONG> (ARM, 740 bytes, Stack size 40 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fe78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[202fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[203592c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[2037420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>

<P><STRONG><a name="[2033370]"></a>start_interval_measurement</STRONG> (ARM, 48 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20332f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_start
</UL>

<P><STRONG><a name="[2033334]"></a>start_timer</STRONG> (ARM, 44 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[20332f8]"></a>ptimer_start</STRONG> (ARM, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2033370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_interval_measurement
</UL>

<P><STRONG><a name="[20332bc]"></a>ptimer_stop_and_uart_print</STRONG> (ARM, 120 bytes, Stack size 72 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2031750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2032308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv
<LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[2033280]"></a>_sbrk</STRONG> (ARM, 44 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2033c58]"></a>uart_init</STRONG> (ARM, 60 bytes, Stack size 0 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2033c1c]"></a>uart_print</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_print
</UL>
<BR>[Calls]<UL><LI><a href="#[2032e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_txbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[2032ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_32
<LI><a href="#[20330a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[20332bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print
<LI><a href="#[2033c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
<LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2032ac4]"></a>uart_print_32</STRONG> (ARM, 44 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2031750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[2032a88]"></a>uart_print_hex</STRONG> (ARM, 144 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2032e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_txbyte
</UL>

<P><STRONG><a name="[20330a0]"></a>uart_printf</STRONG> (ARM, 72 bytes, Stack size 280 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2030760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush (via Veneer)
<LI><a href="#[20321a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf (via Veneer)
<LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[20391a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[2033c94]"></a>ftl_test</STRONG> (ARM, 40 bytes, Stack size 8 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ftl_test &rArr; tc_write_rand &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>
<BR>[Called By]<UL><LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[2032344]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[2032308]"></a>_ll_udiv</STRONG> (ARM, 720 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20332bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print
</UL>

<P><STRONG><a name="[20322cc]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[20321a0]"></a>vsnprintf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vsnprintf.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202e7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[202e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20330a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf (via Veneer)
</UL>

<P><STRONG><a name="[2031750]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[202e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2032ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_32 (via Veneer)
<LI><a href="#[20332bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptimer_stop_and_uart_print (via Veneer)
</UL>

<P><STRONG><a name="[2031318]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202b1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[202ed5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[202ed98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[202c8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[202c980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
<LI><a href="#[203097c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
</UL>

<P><STRONG><a name="[2030a30]"></a>__printf</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[20308c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[2031444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[202e924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[203079c]"></a>_do_fflush</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[202ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2030760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[2030760]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[203079c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[20330a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf (via Veneer)
</UL>

<P><STRONG><a name="[202fef0]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[202feb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[20333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[202feb4]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[202fe78]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[20333ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[202fc20]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[202fbe4]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2032740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
</UL>

<P><STRONG><a name="[202eec4]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[202e528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[202ec6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[202ee88]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[202e528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[202ec6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[202ed98]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[202ed5c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202d010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[202df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[202ec6c]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[202ee88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[202eec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3876d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[202eb40]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[202ee88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[202eec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[202d04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[202df88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[202e384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[202ea50]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202cd04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[202e924]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2030a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2031750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20321a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[202e7f8]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2031750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[20321a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[202e708]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[202e528]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[202ee88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[202eec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3876134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[3876bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[202e384]"></a>_printf_longlong_dec</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, _printf_longlong_dec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3876f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[202c32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[202c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[202c494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[202df88]"></a>_printf_longlong_oct</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, _printf_oct_int_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202df10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[202df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[202df4c]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202df88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[202ed5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[202ca70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[202df10]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202df88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[202bf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[202d04c]"></a>_printf_longlong_hex</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202cf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[202cfd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[202d010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[202d010]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202d04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[202ed5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[202cc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[202cfd4]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202d04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[202be40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[202cf98]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202d04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[202cb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[202bd14]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[202baf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[3876a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[3878aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[3878ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[203079c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[38767c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[202bcd8]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[202baf8]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[202babc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[202babc]"></a>_writebuf</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, stdio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[202baf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[3878b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[3878c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[202ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[202ba80]"></a>_fflush</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stdio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[202babc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[202ba44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[203079c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[202ba44]"></a>_deferredlazyseek</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[202b828]"></a>_initio</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3875d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[3875fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[38767c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[38768b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[202b7ec]"></a>_terminateio</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[38785c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[202b1d4]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2031318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[3878c90]"></a>_sys_open</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3873704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38767c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3878c54]"></a>_sys_close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[3878c18]"></a>_sys_write</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[202babc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[3878bdc]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[3878ba0]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3878b64]"></a>_sys_seek</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sys_io.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[202babc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[3878b28]"></a>_sys_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[3878aec]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[38785c4]"></a>free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h1_free.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3874dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[202b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[387269c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[3876f44]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202e384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[3876d64]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202ec6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3876cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3876cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[3876d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[3876d28]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202cee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[3876cec]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[3876bc0]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202e528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[3876b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3876b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[3876b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[3876b84]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202c110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[3876b48]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3876bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[202c020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[3876a1c]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[3874b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[38769e0]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[38768b4]"></a>setvbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, setvbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[38767c4]"></a>freopen</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[3878c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[202b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[3876788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[3876788]"></a>fopen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3874154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3875d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[38767c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3876620]"></a>_fclose_internal</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[3875d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[38785c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3878c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[202b7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[38767c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[38765e4]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[3876134]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3875090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[38760f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[202e528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[3875fcc]"></a>__rt_SIGRTRED</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3873830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3873b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[202b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3875d38]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202b828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (via Veneer)
<LI><a href="#[3876620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal (via Veneer)
<LI><a href="#[3876788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen (via Veneer)
</UL>

<P><STRONG><a name="[3875cfc]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3875cc0]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3875c84]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[38751bc]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[3875180]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3875090]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3872d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3876134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[3874dc0]"></a>__rt_heap_descriptor</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3874154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via Veneer)
<LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via Veneer)
<LI><a href="#[38785c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via Veneer)
</UL>

<P><STRONG><a name="[3874b2c]"></a>__aeabi_errno_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3876a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal (via Veneer)
</UL>

<P><STRONG><a name="[3874af0]"></a>__rt_errno_addr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[38748d4]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3874898]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[38747a8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[387476c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3874730]"></a>__Heap_Full</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[387269c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3874154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[38746f4]"></a>__Heap_Broken</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[38746b8]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3871aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[3871d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[387269c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[38727c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[3874dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>

<P><STRONG><a name="[3874154]"></a>malloc</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3874730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[3874dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3876788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[3873b3c]"></a>__sig_exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_exit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38730b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3871d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3875fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3873830]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3875fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3873704]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3878c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[38730b0]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3873b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via Veneer)
</UL>

<P><STRONG><a name="[3872d2c]"></a>__rt_locale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_locale.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3875090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[38727c8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[387278c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[387269c]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, h1_extend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38785c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3874730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3871f58]"></a>__default_signal_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, defsig_general.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[38714cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3873830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[3871d3c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38714cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3873b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[38746f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3871aa8]"></a>__rt_heap_escrow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, heapauxa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3871a6c]"></a>__rt_heap_expand</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, heapauxa.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38746b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3874730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3871724]"></a>_ttywrch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sys_wrch.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3871f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[38714cc]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3871f58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3871d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3870d10]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3872264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[202fba8]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[202fb6c]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[202fc5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[202fc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[202fcd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2034108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[2034144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[20341bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[20341f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[20365d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[203772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[20377a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2031444]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2030a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[202e4ec]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[202e528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[202eb40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[202ec6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[202ee88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[202eec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2030a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38760f8]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3876134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[3872264]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3870d10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[38791b8]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202c6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[202c764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[202c818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[38790c8]"></a>_printf_fp_hex</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202c5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[203970c]"></a>reset_handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = reset_handler &rArr; init_jasmine &rArr; ftl_test &rArr; tc_write_rand &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20391e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
<LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[2038cbc]"></a>update_bundle_lives</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20372b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[20372f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[2037330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[203736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[20373a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[2037498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[20374d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[2037510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[203754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[20375c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_smt_cache
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>

<P><STRONG><a name="[2038c80]"></a>logging_smt_cache</STRONG> (ARM, 284 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = logging_smt_cache &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20372f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[2037330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[2038c44]"></a>logging_misc_metadata</STRONG> (ARM, 152 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = logging_misc_metadata &rArr; nand_page_ptprogram
</UL>
<BR>[Calls]<UL><LI><a href="#[20372f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[2037330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>

<P><STRONG><a name="[2038c08]"></a>fetch_smt_bundle</STRONG> (ARM, 196 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = fetch_smt_bundle &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[20372b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[2038bcc]"></a>evict_smt_bundle</STRONG> (ARM, 284 bytes, Stack size 48 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20372f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[2037330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[2038b90]"></a>select_victim_bundle</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[2038b54]"></a>where_bundle_cached</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20389b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[2038b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
</UL>

<P><STRONG><a name="[2038b18]"></a>set_psn</STRONG> (ARM, 160 bytes, Stack size 32 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = set_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2037498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[2038b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;where_bundle_cached
<LI><a href="#[2038b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_victim_bundle
<LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[2037894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
</UL>

<P><STRONG><a name="[2038adc]"></a>is_bad_block</STRONG> (ARM, 140 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_bad_block &rArr; _mem_search_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[20375c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[2038a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[2038aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
</UL>

<P><STRONG><a name="[2038aa0]"></a>get_free_page</STRONG> (ARM, 120 bytes, Stack size 24 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_free_page &rArr; is_bad_block &rArr; _mem_search_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[203736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[2038adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[2037894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_merge_buffer
</UL>

<P><STRONG><a name="[2038a64]"></a>write_format_mark</STRONG> (ARM, 164 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_format_mark
</UL>
<BR>[Calls]<UL><LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>
<BR>[Called By]<UL><LI><a href="#[2038a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[2038a28]"></a>format</STRONG> (ARM, 140 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = format &rArr; is_bad_block &rArr; _mem_search_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[2038a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_format_mark
<LI><a href="#[2038adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[20389ec]"></a>sanity_check</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[203781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[20389b0]"></a>get_psn</STRONG> (ARM, 152 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = get_psn &rArr; evict_smt_bundle &rArr; update_bundle_lives &rArr;  update_bundle_lives (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2037510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[2038b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;where_bundle_cached
<LI><a href="#[2038b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_victim_bundle
<LI><a href="#[2038bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evict_smt_bundle
<LI><a href="#[2038c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fetch_smt_bundle
<LI><a href="#[2038cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_bundle_lives
</UL>
<BR>[Called By]<UL><LI><a href="#[2037768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[20377e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
</UL>

<P><STRONG><a name="[2036f70]"></a>get_integrity_word</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sata_identify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2036dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[2036f34]"></a>set_string_data</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_string_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2036dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[2035cec]"></a>eventq_get_count</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[2035cb0]"></a>eventq_get</STRONG> (ARM, 160 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[203925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[2032e0c]"></a>uart_txbyte</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2032a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_hex
<LI><a href="#[2033c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[2032740]"></a>tc_write_rand</STRONG> (ARM, 408 bytes, Stack size 48 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = tc_write_rand &rArr; uart_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202fbe4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[202fe78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[202fef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[20330a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[20360ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[203736c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[20373e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[2037510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[2037588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[203772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[20377a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[2037858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[2033c94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
</UL>

<P><STRONG><a name="[202fcd4]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[202fc98]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[202fc5c]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[202fb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[202e960]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3876cb0]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3876d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3876b0c]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3876bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
