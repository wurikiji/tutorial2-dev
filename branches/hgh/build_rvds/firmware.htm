<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\Jeff\Desktop\skku_internship\tutorial2_dev\branches\hgh\build_rvds\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\Jeff\Desktop\skku_internship\tutorial2_dev\branches\hgh\build_rvds\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 400]: Last Updated: Fri Jan 20 06:34:11 2012
<BR><P>
<H3>Maximum Stack Usage =         56 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ata_flush_cache &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[21c9694]">disable_interrupt</a>
 <LI><a href="#[21c9658]">enable_interrupt</a>
 <LI><a href="#[21c970c]">reset_handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21c8cbc]">logging_misc_metadata</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21c8cbc]">logging_misc_metadata</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21c67b4]">ata_not_supported</a>
 <LI><a href="#[21c6868]">ata_nop</a>
 <LI><a href="#[21c67f0]">ata_recalibrate</a>
 <LI><a href="#[21c68a4]">ata_read_native_max_address</a>
 <LI><a href="#[21c6b38]">ata_read_verify_sectors</a>
 <LI><a href="#[21c6b38]">ata_read_verify_sectors</a>
 <LI><a href="#[21c6ac0]">ata_seek</a>
 <LI><a href="#[21c673c]">ata_execute_drive_diagnostics</a>
 <LI><a href="#[21c682c]">ata_initialize_device_parameters</a>
 <LI><a href="#[21c6994]">ata_standby_immediate</a>
 <LI><a href="#[21c691c]">ata_idle_immediate</a>
 <LI><a href="#[21c69d0]">ata_standby</a>
 <LI><a href="#[21c6958]">ata_idle</a>
 <LI><a href="#[21c6bec]">ata_check_power_mode</a>
 <LI><a href="#[21c68e0]">ata_sleep</a>
 <LI><a href="#[21c6a84]">ata_set_multiple_mode</a>
 <LI><a href="#[21c6994]">ata_standby_immediate</a>
 <LI><a href="#[21c691c]">ata_idle_immediate</a>
 <LI><a href="#[21c69d0]">ata_standby</a>
 <LI><a href="#[21c6958]">ata_idle</a>
 <LI><a href="#[21c6a48]">ata_read_buffer</a>
 <LI><a href="#[21c6bec]">ata_check_power_mode</a>
 <LI><a href="#[21c68e0]">ata_sleep</a>
 <LI><a href="#[21c6b74]">ata_flush_cache</a>
 <LI><a href="#[21c6a0c]">ata_write_buffer</a>
 <LI><a href="#[21c6b74]">ata_flush_cache</a>
 <LI><a href="#[21c7024]">ata_identify_device</a>
 <LI><a href="#[21c6afc]">ata_set_features</a>
 <LI><a href="#[21c68a4]">ata_read_native_max_address</a>
 <LI><a href="#[21c6778]">ata_srst</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21c9694]"></a>disable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c5bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[21c9658]"></a>enable_interrupt</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c5bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
</UL>

<P><STRONG><a name="[21c14bc]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A), UNUSED)

<P><STRONG><a name="[21c7a74]"></a>ftl_flush</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[21c6958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[21c6994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[21c69d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[21c6b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[21c8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[21c7a38]"></a>ftl_open</STRONG> (ARM, 500 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ftl_open &rArr; format &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[21c772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[21c77a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c8c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sanity_check
<LI><a href="#[21c8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>
<BR>[Called By]<UL><LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c79fc]"></a>ftl_read_sector</STRONG> (ARM, 228 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ftl_read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[21c8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[21c79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>

<P><STRONG><a name="[21c79c0]"></a>ftl_read</STRONG> (ARM, 208 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ftl_read &rArr; ftl_read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c7984]"></a>ftl_write_sector</STRONG> (ARM, 472 bytes, Stack size 40 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[21c8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[21c8b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[21c8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
</UL>

<P><STRONG><a name="[21c7948]"></a>ftl_write</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c790c]"></a>ftl_isr</STRONG> (ARM, 200 bytes, Stack size 8 bytes, ftl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c91a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[21c7024]"></a>ata_identify_device</STRONG> (ARM, 216 bytes, Stack size 8 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ata_identify_device &rArr; set_string_data
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[21c718c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string_data
<LI><a href="#[21c71c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrity_word
<LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6bec]"></a>ata_check_power_mode</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6bb0]"></a>send_status_to_host</STRONG> (ARM, 128 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c67b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_not_supported
<LI><a href="#[21c67f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_recalibrate
<LI><a href="#[21c682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[21c6868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_nop
<LI><a href="#[21c68e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_sleep
<LI><a href="#[21c691c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle_immediate
<LI><a href="#[21c6958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_idle
<LI><a href="#[21c6994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby_immediate
<LI><a href="#[21c69d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_standby
<LI><a href="#[21c6a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_multiple_mode
<LI><a href="#[21c6ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_seek
<LI><a href="#[21c6afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_set_features
<LI><a href="#[21c6b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_verify_sectors
<LI><a href="#[21c6b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_flush_cache
<LI><a href="#[21c6f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
<LI><a href="#[21c9220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[21c6b74]"></a>ata_flush_cache</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ata_flush_cache &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6b38]"></a>ata_read_verify_sectors</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6afc]"></a>ata_set_features</STRONG> (ARM, 196 bytes, Stack size 4 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ata_set_features
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6ac0]"></a>ata_seek</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6a84]"></a>ata_set_multiple_mode</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6f70]"></a>pio_sector_transfer</STRONG> (ARM, 220 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[21c6a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_write_buffer
<LI><a href="#[21c6a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_read_buffer
<LI><a href="#[21c7024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[21c6a48]"></a>ata_read_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6a0c]"></a>ata_write_buffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_sector_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c69d0]"></a>ata_standby</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ata_standby &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6994]"></a>ata_standby_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ata_standby_immediate &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6958]"></a>ata_idle</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ata_idle &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c691c]"></a>ata_idle_immediate</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ata_idle_immediate &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c68e0]"></a>ata_sleep</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c68a4]"></a>ata_read_native_max_address</STRONG> (ARM, 164 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c6868]"></a>ata_nop</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c682c]"></a>ata_initialize_device_parameters</STRONG> (ARM, 104 bytes, Stack size 8 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ata_initialize_device_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c67f0]"></a>ata_recalibrate</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c67b4]"></a>ata_not_supported</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_main.o(.text)
</UL>
<P><STRONG><a name="[21c6778]"></a>ata_srst</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[21c673c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_execute_drive_diagnostics
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c673c]"></a>ata_execute_drive_diagnostics</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sata_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ata_execute_drive_diagnostics &rArr; ata_srst
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sata_table.o(.constdata)
</UL>
<P><STRONG><a name="[21c9220]"></a>fiq_handler</STRONG> (ARM, 1152 bytes, Stack size 56 bytes, sata_isr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c6bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_status_to_host
</UL>

<P><STRONG><a name="[21c925c]"></a>Main</STRONG> (ARM, 184 bytes, Stack size 24 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = Main &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c5f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get
<LI><a href="#[21c5f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventq_get_count
<LI><a href="#[21c7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[21c7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[21c79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
</UL>
<BR>[Called By]<UL><LI><a href="#[21c970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[21c6700]"></a>delay</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sata_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c5bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c6778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_srst
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c5bc0]"></a>sata_reset</STRONG> (ARM, 272 bytes, Stack size 8 bytes, sata_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c5b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[21c6700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[21c9658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_interrupt
<LI><a href="#[21c9694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_interrupt
</UL>

<P><STRONG><a name="[21c7894]"></a>_mem_copy</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c50bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clr_bit_dram
<LI><a href="#[21c50f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_bit_dram
<LI><a href="#[21c5134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_8
<LI><a href="#[21c7024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
<LI><a href="#[21c76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[21c772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c51ac]"></a>_mem_bmp_find_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[21c5170]"></a>_mem_bmp_find_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[21c5b84]"></a>_mem_set_sram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[21c5bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sata_reset
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c77e0]"></a>_mem_set_dram</STRONG> (ARM, 76 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[21c79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c781c]"></a>_mem_search_min_max</STRONG> (ARM, 80 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c8b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_victim_blk
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c7858]"></a>_mem_search_equ</STRONG> (ARM, 112 bytes, Stack size 4 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c76f0]"></a>_write_dram_32</STRONG> (ARM, 36 bytes, Stack size 12 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _write_dram_32
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c8b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[21c8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c772c]"></a>_write_dram_16</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _write_dram_16
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c5134]"></a>_write_dram_8</STRONG> (ARM, 80 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[21c50f8]"></a>_set_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[21c50bc]"></a>_clr_bit_dram</STRONG> (ARM, 84 bytes, Stack size 8 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
</UL>

<P><STRONG><a name="[21c5080]"></a>_tst_bit_dram</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[21c5044]"></a>_read_dram_8</STRONG> (ARM, 52 bytes, Stack size 0 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c4fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_cmp_dram
</UL>

<P><STRONG><a name="[21c77a4]"></a>_read_dram_16</STRONG> (ARM, 56 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c7768]"></a>_read_dram_32</STRONG> (ARM, 32 bytes, Stack size 0 bytes, mem_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c5008]"></a>_mem_cmp_sram</STRONG> (ARM, 76 bytes, Stack size 4 bytes, mem_util.o(.text), UNUSED)

<P><STRONG><a name="[21c4fcc]"></a>_mem_cmp_dram</STRONG> (ARM, 108 bytes, Stack size 20 bytes, mem_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c5044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_8
</UL>

<P><STRONG><a name="[21c7600]"></a>flash_issue_cmd</STRONG> (ARM, 84 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c42e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase_sync
<LI><a href="#[21c4324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_modified_copyback
<LI><a href="#[21c4360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_copyback
<LI><a href="#[21c439c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[21c43d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[21c4414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program
<LI><a href="#[21c4450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[21c448c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[21c44c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read
<LI><a href="#[21c4888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[21c7510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[21c754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[21c7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c493c]"></a>flash_copy</STRONG> (ARM, 100 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[21c4900]"></a>flash_modify_copy</STRONG> (ARM, 124 bytes, Stack size 20 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[21c48c4]"></a>flash_erase</STRONG> (ARM, 88 bytes, Stack size 4 bytes, flash.o(.text), UNUSED)

<P><STRONG><a name="[21c763c]"></a>flash_finish</STRONG> (ARM, 20 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c4888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c7678]"></a>flash_clear_irq</STRONG> (ARM, 44 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks
<LI><a href="#[21c4888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c4888]"></a>flash_reset</STRONG> (ARM, 260 bytes, Stack size 24 bytes, flash.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c763c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[21c7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c44c8]"></a>nand_page_read</STRONG> (ARM, 80 bytes, Stack size 0 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c7510]"></a>nand_page_ptread</STRONG> (ARM, 96 bytes, Stack size 16 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c448c]"></a>nand_page_read_to_host</STRONG> (ARM, 132 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c4450]"></a>nand_page_ptread_to_host</STRONG> (ARM, 132 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c4414]"></a>nand_page_program</STRONG> (ARM, 80 bytes, Stack size 0 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c754c]"></a>nand_page_ptprogram</STRONG> (ARM, 92 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand_page_ptprogram
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c43d8]"></a>nand_page_program_from_host</STRONG> (ARM, 128 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c439c]"></a>nand_page_ptprogram_from_host</STRONG> (ARM, 128 bytes, Stack size 16 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c4360]"></a>nand_page_copyback</STRONG> (ARM, 96 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c4324]"></a>nand_page_modified_copyback</STRONG> (ARM, 280 bytes, Stack size 40 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c7588]"></a>nand_block_erase</STRONG> (ARM, 72 bytes, Stack size 8 bytes, flash_wrapper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nand_block_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c42e8]"></a>nand_block_erase_sync</STRONG> (ARM, 72 bytes, Stack size 8 bytes, flash_wrapper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
</UL>

<P><STRONG><a name="[21c91e4]"></a>init_jasmine</STRONG> (ARM, 424 bytes, Stack size 40 bytes, initialize.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = init_jasmine &rArr; ftl_test &rArr; tc_write_seq &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c3f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
<LI><a href="#[21c4888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
<LI><a href="#[21c5b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[21c6700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>
<BR>[Called By]<UL><LI><a href="#[21c970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_handler
</UL>

<P><STRONG><a name="[21c75c4]"></a>led</STRONG> (ARM, 36 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[21c8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
<LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c6304]"></a>led_blink</STRONG> (ARM, 44 bytes, Stack size 8 bytes, misc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>
<BR>[Called By]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
<LI><a href="#[21c91a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[21c9220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_handler
</UL>

<P><STRONG><a name="[21c38d4]"></a>swi_handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[21c91a8]"></a>irq_handler</STRONG> (ARM, 184 bytes, Stack size 24 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_isr
</UL>

<P><STRONG><a name="[21c3898]"></a>test_nand_blocks</STRONG> (ARM, 740 bytes, Stack size 40 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[21c2dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[21c5b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_sram
<LI><a href="#[21c7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
</UL>

<P><STRONG><a name="[21c385c]"></a>start_interval_measurement</STRONG> (ARM, 48 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[21c3820]"></a>start_timer</STRONG> (ARM, 44 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[21c3f28]"></a>ftl_test</STRONG> (ARM, 56 bytes, Stack size 8 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = ftl_test &rArr; tc_write_seq &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c32f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_seq
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
</UL>

<P><STRONG><a name="[21c2dd0]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[21c2d94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
<LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[21c3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[21c2d94]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c2dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[21c2d58]"></a>rand</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rand.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rand
</UL>
<BR>[Called By]<UL><LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand (via Veneer)
<LI><a href="#[21c3898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_nand_blocks (via Veneer)
</UL>

<P><STRONG><a name="[21c2b00]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[21c2ac4]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21c3334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_write_rand
</UL>

<P><STRONG><a name="[21c2a88]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[21c2a4c]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[21c2b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[21c2b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[21c2bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[21c439c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram_from_host
<LI><a href="#[21c43d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_program_from_host
<LI><a href="#[21c4450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread_to_host
<LI><a href="#[21c448c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_read_to_host
<LI><a href="#[21c682c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_initialize_device_parameters
<LI><a href="#[21c7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[21c79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[21c970c]"></a>reset_handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, init.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = reset_handler &rArr; init_jasmine &rArr; ftl_test &rArr; tc_write_seq &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c91e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_jasmine
<LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c8cbc]"></a>logging_misc_metadata</STRONG> (ARM, 156 bytes, Stack size 32 bytes, ftl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[21c7510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[21c754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[21c7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c7600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_issue_cmd
<LI><a href="#[21c763c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[21c7678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_clear_irq
<LI><a href="#[21c76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[21c772c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_16
<LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[21c77a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_16
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_min_max
<LI><a href="#[21c7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
<LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
<LI><a href="#[21c8cbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logging_misc_metadata
</UL>

<P><STRONG><a name="[21c8c80]"></a>is_bad_block</STRONG> (ARM, 148 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_bad_block &rArr; _mem_search_equ
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_equ
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
<LI><a href="#[21c8c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format
</UL>

<P><STRONG><a name="[21c8c44]"></a>format</STRONG> (ARM, 332 bytes, Stack size 24 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = format &rArr; ftl_flush &rArr; logging_misc_metadata &rArr;  logging_misc_metadata (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
<LI><a href="#[21c8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[21c8c08]"></a>sanity_check</STRONG> (ARM, 4 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_open
</UL>

<P><STRONG><a name="[21c8bcc]"></a>get_psn</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read_sector
<LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
</UL>

<P><STRONG><a name="[21c8b90]"></a>set_psn</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_psn &rArr; _write_dram_32
</UL>
<BR>[Calls]<UL><LI><a href="#[21c76f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_dram_32
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
<LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
</UL>

<P><STRONG><a name="[21c8b54]"></a>get_victim_blk</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[21c781c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_search_min_max
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
</UL>

<P><STRONG><a name="[21c8b18]"></a>garbage_collection</STRONG> (ARM, 524 bytes, Stack size 320 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c7510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptread
<LI><a href="#[21c754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_page_ptprogram
<LI><a href="#[21c7588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_block_erase
<LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[21c7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_copy
<LI><a href="#[21c8b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_victim_blk
<LI><a href="#[21c8b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psn
<LI><a href="#[21c8bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psn
</UL>
<BR>[Called By]<UL><LI><a href="#[21c8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_page
</UL>

<P><STRONG><a name="[21c8adc]"></a>get_free_page</STRONG> (ARM, 204 bytes, Stack size 16 bytes, ftl.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c8b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;garbage_collection
<LI><a href="#[21c8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_bad_block
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write_sector
</UL>

<P><STRONG><a name="[21c71c8]"></a>get_integrity_word</STRONG> (ARM, 80 bytes, Stack size 0 bytes, sata_identify.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c7024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[21c718c]"></a>set_string_data</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sata_identify.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_string_data
</UL>
<BR>[Called By]<UL><LI><a href="#[21c7024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ata_identify_device
</UL>

<P><STRONG><a name="[21c5f44]"></a>eventq_get_count</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c5f08]"></a>eventq_get</STRONG> (ARM, 160 bytes, Stack size 0 bytes, sata_main.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[21c925c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main
</UL>

<P><STRONG><a name="[21c3334]"></a>tc_write_rand</STRONG> (ARM, 344 bytes, Stack size 48 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tc_write_rand &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c2ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[21c2d58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
<LI><a href="#[21c2dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c763c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[21c79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[21c3f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
</UL>

<P><STRONG><a name="[21c32f8]"></a>tc_write_seq</STRONG> (ARM, 336 bytes, Stack size 48 bytes, tc_synth.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = tc_write_seq &rArr; ftl_write &rArr; ftl_write_sector &rArr; get_free_page &rArr; garbage_collection &rArr; nand_page_ptread
</UL>
<BR>[Calls]<UL><LI><a href="#[21c6304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[21c75c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[21c763c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_finish
<LI><a href="#[21c7768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_dram_32
<LI><a href="#[21c77e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mem_set_dram
<LI><a href="#[21c7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_write
<LI><a href="#[21c79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_read
<LI><a href="#[21c7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[21c3f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftl_test
</UL>

<P><STRONG><a name="[21c2bb4]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[21c2b78]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[21c2b3c]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21c2a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
