회의 주제: Task 구현 아이디어에 관한 회의
<정현모 이사님>

Adress mapping
	1. 512Byte sector-level mapping은 read/write performance를 높이기 위해 bank-wise로 구현
	2. Sequential read bandwidth를 높이기 위해 각 LSN에 대한 데이터는 특정 bank에 고정하도록 구현
	3. SATA로 전달된 데이터를 merge buffer에 모았다가, virtual page 단위로 NAND에 기록하는 방식은 현재 Jasmine platform의 host, DRAM, NAND b/w를 고려했을 때, reasonable함.
		- SATA b/w = 260MB/s, NAND write b/w = 4ch/4way일 경우, 약 100MB/s under
		- DRAM b/w = 175Mhz * 4B = 700MB/s, SATA->DRAM, DRAM->NAND를 고려했을 때, max 350MB/s
		- SATA->DRAM 데이터를 DRAM->DRAM(merge buffer)해줘야 하므로, max DRAM b/w는 180MB/s under
		- 그래도 DRAM b/w > NANd write b/w, NAND bottleneck 상황이기 때문에 합리적인 방법임

Caching mapping table
	1. 본 task의 주된 목적인 address mapping과 POR에 좀더 집중하기 위해, 간단하게 접근
	2. DFTL과 같은 방법보다는 각 bank에 mapping table 저장을 위한 block(i.e., map block)을 할당해 놓고, Computer architecture에서의 direct mapping 방식의 cache management와 유사하게 구현하는 방식이 어떨까 제안해주셨음

Garbage collection
	1. 이 부분의 구현은 위에서 언급한 것들을 모두 수행 후 진행.
	2. sector-level mapping이 한계가 있기 때문에, GC가 발생하는 상황에서의 performance는 고려하지 않기로 함.


