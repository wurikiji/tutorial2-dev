ftl_read
(1)Read 해야 할 lba와 total_sector를 입력받는다
(2)lba % SETORS_PER_PAGE를 통해 READ_BUFFER에서 입력을 시작할 Sector의 offset을 계산한다.
(3)ftl_read_sector 명령을 통해 하나의 Sector를 읽어 온다.
(4)ftl_read_sector 명령을 total_sector번 호출 하였을 시 (7)번 부터 시행한다.
(5)sect_offset을 1 증가시키고 sect_offset이 SECTOR_PER_PAGE가 될 때까지 (2) ~ (3)의 작업을 반복 수행한다.
(6)g_ftl_read_buf_id를 증가시키고 sect_offset을 0으로 돌리고 (2)번 부터 반복한다.
(7)g_ftl_read_buf_id를 증가시키고 수행을 종료한다.

ftl_read_sector
(1)get_psn함수를 통해 현재 lba의 psn의 정보를 받아온다.
(2)받아온 정보가 -1일시 (3)번 부터, NULL일 시 (6)번부터, 나머지 경우는 (8)번부터 시작한다.
(3)lba의 정보가 MERGE_BUFFER에 존재하는 경우이다. 
(4)lba의 해당 bank의 g_merge_buffer_lsn을 모두 탐색하여 해당 lba와 같은 곳을 찾는다.
(5)해당 D_RAM ADDRESS로 접근하여 정보를 읽어온다.
(6)한번도 Write하지 않은 lba의 내용의 READ명령인 경우이다. 
(7)0xFFFF의 값을 전달한다.
(8)lba의 정보가 NAND에 존재하는 경우이다.
(9)get_psn함수를 통해 얻은 장소에서 FC_COL_RW_READ_OUT명령을 통해 하나의 sector를 읽어온다.
	-이때 NAND에서의 Page내 sector offset과 READ_BUFFER의 sector_offset을 맞추기 위하여 FCP_DMA_ADDR을 RD_BUF_PTR(g_ftl_read_buf_id) + (BYTES_PER_SECTOR * (sect_offset - nand_offset))과 같이 설정한다.

sect_offset : 데이터를 읽어들일 READ_BUFFER내의 sector offset
g_ftl_read_buf_id : SATA와 통신을 하는 READ_BUFFER의 offset (PAGE단위)
get_psn : lba의 값을 입력받아, 입력받은 lba의 psn을 출력하는 함수
MERGE_BUFFER : WRITE 수행 시 WRITE할 Sector들을 모아 두는 BUFFER(PAGE크기가 모일 시 NAND에 WRITE를 수행)
g_merge_buffer_lsn : MERGE_BUFFER내에 존재하는 데이터의 lba를 기록하는 공간
FC_COL_RW_READ_OUT : NAND의 정보를 D_RAM으로 읽어오기 위하여 사용하는 CMD
FCP_DMA_ADDR : FC_COL_RW_READ_OUT CMD의 수행시 읽어올 D_RAM의 주소
RD_BUF_PTR(g_ftl_read_buf_id) : 현재 READ 명령이 기록되고 있는 RD_BUFFER장소의 포인터
nand_offset : 읽어올 데이터가 존재하는 NAND내의 sector offset